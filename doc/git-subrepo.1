.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "GIT\-SUBREPO" "1" "March 2014" "" ""
.
.SH "NAME"
\fBgit\-subrepo\fR \- Git Submodule Alternative
.
.P
 \fIhttps://travis\-ci\.org/ingydotnet/git\-subrepo\fR
.
.SH "Synopsis"
.
.nf

git subrepo help

git subrepo clone <remote\-url>
git subrepo pull <subdir> \-\-rebase
git subrepo push <subdir>
git subrepo checkout <subdir>

git subrepo status <subdir>
git subrepo fetch \-\-all
git subrepo clean \-\-all

git subrepo version
.
.fi
.
.SH "Description"
This git command "clones" an external git repo and merges it into a subdirectory of your repo\. Later on, upstream changes can be pulled in, and local changes can be pushed back\. Simple\.
.
.SH "Benefits"
This command is an improvement on \fBgit\-submodule\fR and \fBgit\-subtree\fR; two other git commands with similar goals, but various problems\.
.
.P
It assumes there are 3 main roles of people interacting with a repo, and attempts to serve them all well:
.
.IP "\(bu" 4
owner \- The person who authors/owns/maintains a repo\.
.
.IP "\(bu" 4
users \- People who are just using/installing the repo\.
.
.IP "\(bu" 4
collaborators \- People who commit code to the repo and subrepos\.
.
.IP "" 0
.
.P
The \fBgit\-subrepo\fR command benefits these roles in the following ways:
.
.IP "\(bu" 4
Simple and intuitive commandline usage\.
.
.IP "\(bu" 4
Users get your repo and all your subrepos just by cloning your repo\.
.
.IP "\(bu" 4
Users do not need to install git\-subrepo, ever\.
.
.IP "\(bu" 4
Collaborators do not need to install unless they want to push/pull\.
.
.IP "\(bu" 4
Collaborators know when a subdir is a subrepo (it has a \fB\.gitrepo\fR file)\.
.
.IP "\(bu" 4
Well named branches and remotes are generated for manual operations\.
.
.IP "\(bu" 4
Owners do not deal with the complications of keeping submodules in sync\.
.
.IP "\(bu" 4
Subrepos can contain other subrepos\.
.
.IP "\(bu" 4
Branching with subrepos just works\.
.
.IP "\(bu" 4
Different branches can have different subrepos in different states, etc\.
.
.IP "\(bu" 4
Moving/renaming a subrepo subdir just works\.
.
.IP "\(bu" 4
Your git history is kept squeaky clean\.
.
.IP "\(bu" 4
Upstream history (clone/pull) is condensed into a single commit\.
.
.IP "\(bu" 4
You can see the complete subrepo history by using a subrepo remote branch\.
.
.IP "\(bu" 4
Commits pushed back upstream are NOT condensed\.
.
.IP "\(bu" 4
Easy to play around with subrepos and then reset back\.
.
.IP "\(bu" 4
Does not introduce history that messes up other git commands\.
.
.IP "\(bu" 4
Fixes known rebase failures with \fBgit\-subtree\fR\.
.
.IP "" 0
.
.SH "Installation"
Get the source code from GitHub:
.
.IP "" 4
.
.nf

git clone git@github\.com:git\-commands/git\-subrepo
.
.fi
.
.IP "" 0
.
.P
Then run:
.
.IP "" 4
.
.nf

make test
make install        # Possibly with \'sudo\'
.
.fi
.
.IP "" 0
.
.P
This will install the \fBgit\-subrepo\fR command next to your other Git subcommands\. It will also install the manpage (for \fBgit help subrepo\fR)\.
.
.P
To use git\-subrepo WITHOUT installing:
.
.IP "" 4
.
.nf

export GIT_EXEC_PATH="/path/to/git\-subrepo/lib:$(git \-\-exec\-path)"
.
.fi
.
.IP "" 0
.
.SH "Command Options"
.
.IP "\(bu" 4
\fB\-h\fR
.
.IP "" 0
.
.P
Short help\.
.
.IP "\(bu" 4
\fB\-\-help\fR
.
.IP "" 0
.
.P
Long help\.
.
.IP "\(bu" 4
\fB\-\-all\fR
.
.IP "" 0
.
.P
If you have multiple subrepos, issue the command to all of them (if applicable)\.
.
.IP "\(bu" 4
\fB\-\-branch=<branch\-name>\fR (\fB\-b <branch\-name>\fR)
.
.IP "" 0
.
.P
Use a different branch\-name than the remote HEAD or the one saved in \fB\.gitrepo\fR locally\.
.
.IP "\(bu" 4
\fB\-\-remote=<remote\-url>\fR (\fB\-r <remote\-url>\fR)
.
.IP "" 0
.
.P
Use a different remote\-url than the one saved in \fB\.gitrepo\fR locally\.
.
.IP "\(bu" 4
\fB\-\-update\fR (\fB\-u\fR)
.
.IP "" 0
.
.P
If \fB\-b\fR or \fB\-r\fR are used, and the command updates the \fB\.gitrepo\fR file, include these values to the update\.
.
.IP "\(bu" 4
\fB\-\-continue\fR
.
.IP "" 0
.
.P
On a pull or push, you often want to do things by hand\. This involves a \fBsubrepo checkout\fR, merging and testing, etc\. When the subrepo branch is ready to be integrated (pulled) or pushed back upstream, use this flag on the relevant pull or push command\.
.
.SS "Merge Options"
When doing a \fBpull\fR command (or doing a \fBcheckout\fR for manual merge/pull) you can specify a \'merge strategy\' to be tried:
.
.IP "\(bu" 4
\fB\-\-reclone\fR
.
.IP "" 0
.
.P
Use this option when you have no local changes to the subrepo, and you simply want to replace the old content with the new upstream content\. If you use \fB\-\-branch\fR or \fB\-\-remote\fR options with this option, the \fB\-\-update\fR option is turned on automatically\. (new remote and branch are stored in \.gitrepo file)
.
.IP "\(bu" 4
\fB\-\-rebase\fR
.
.IP "" 0
.
.P
Attempt a rebase on top off the remote head\.
.
.IP "\(bu" 4
\fB\-\-merge\fR
.
.IP "" 0
.
.P
Use the default (recursive) merge strategy\.
.
.IP "\(bu" 4
\fB\-\-ours\fR
.
.IP "" 0
.
.P
Use recursive + \fB\-X ours\fR option\.
.
.IP "\(bu" 4
\fB\-\-theirs\fR
.
.IP "" 0
.
.P
Use recursive + \fB\-X theirs\fR option\.
.
.IP "\(bu" 4
\fB\-\-graft\fR
.
.IP "" 0
.
.P
This option creates a graft between your local detached subrepo branch and the fetched upstream branch, so that you can try a hand merge\. Some commands like \fBgit rebase\fR seem to need this\.
.
.IP "\(bu" 4
\-\-fetch
.
.IP "" 0
.
.P
When you specify a merge strategy, the command will do a remote fetch automatically\. If no merge strategy option is supplied for a checkout command, the fetch is not done\. This flag says to fetch anyway\.
.
.SH "Commands"
.
.IP "\(bu" 4
\fBgit subrepo clone <repository> [<subdir>] [\-b <upstream\-branch>]\fR
.
.IP "" 0
.
.P
This command adds a repository as a subrepo in a subdir of your repository\. It is similar in feel to \fBgit clone\fR\. You just specify the remote repo url, and optionally a sub\-directory and/or branch name\. The repo will be fetched and merged into the subdir\. The subrepo history is not added to your repo history, but a commit is added that contains the reference information\. This information is also stored in a special file called \fB<subdir>/\.gitrepo\fR\. The presence of this file indicates that the directory is a subrepo\.
.
.IP "\(bu" 4
\fBgit subrepo pull <subdir>|\-\-all [\-\-<strategy> | \-\-continue] [\-r <remote>] [\-b <branch>] [\-u]\fR
.
.IP "" 0
.
.P
Update the subdir with the latest remote changes\. The subdir must be a subrepo (must contain a \.gitrepo file)\. If you specify a merge\-strategy like \fB\-\-rebase\fR or \fB\-\-ours\fR, the command will attempt to fetch, merge and integrate all in one step\. If you want to merge yourself, run a \fBgit subrepo checkout\fR first, merge yourself, then run \fBgit subrepo pull <subdir> \-\-continue\fR and your branch will be integrated (pulled) into the mainline repo\.
.
.IP "\(bu" 4
\fBgit subrepo push <subdir>|\-\-all [\-\-continue] [\-r <remote>] [\-b <branch>]\fR
.
.IP "" 0
.
.P
This command will make sure that you have already pulled (merged) the upstream head\. Then it will create a branch of the local history involving the subrepo, and push that back to the remote\.
.
.IP "\(bu" 4
\fBgit subrepo checkout <subdir>|\-\-all [\-\-<strategy> [\-r <remote>] [\-b <branch>]]\fR
.
.IP "" 0
.
.P
This command creates a local branch called subrepo/\fIsubrepo\fR, that contains all the subdir commits since the last pull\. This is useful when a subrepo pull has failed\. You can merge things by hand, then run a \'git subrepo push\' command\. If you specify a merge\-strategy, then it will be applied using the remote head (which is automatically fetched) and this new branch\. With no merge\-strategy, just make the branch\. After all this, the \fBcheckout\fR command will actually checkout the new branch\. This command is normally used for hand merging, but can also be used to see what the local subrepo changes look like, by themselves\. Note: the \fB\.gitrepo\fR file will be deleted in this subrepo branch\.
.
.IP "\(bu" 4
\fBgit subrepo status <subdir>|\-\-all [\-\-quiet]\fR
.
.IP "" 0
.
.P
Get the status of a subrepo\. If \fB\-\-all\fR provided, get the status of all subrepos\. If the \fB\-\-quiet\fR flag is used, print less info, and on 1 line per subrepo\.
.
.IP "\(bu" 4
\fBgit subrepo fetch <subdir>|\-\-all\fR
.
.IP "" 0
.
.P
This command will fetch the remote content for a subrepo\. It will create a branch pointing at the FETCH_HEAD called \fBsubrepo/remote/<subdir>\fR and a remote called \fBsubrepo/<subdir>\fR\.
.
.IP "\(bu" 4
\fBgit subrepo clean <subdir>|\-\-all\fR
.
.IP "" 0
.
.P
When you run a subrepo command that does a remote fetch, extra branches, remotes and grafts are created for you\. This command will remove them\.
.
.IP "\(bu" 4
\fBgit subrepo help\fR
.
.IP "" 0
.
.P
Same as \fBgit help subrepo\fR\. Will launch the manpage\. For the shorter usage, use \fBgit subrepo \-h\fR\.
.
.IP "\(bu" 4
\fBgit subrepo version [\-\-verbose] [\-\-quiet]\fR
.
.IP "" 0
.
.P
This command will display version information about git\-subrepo and its environment\. For just the version number, use \fBgit subrepo \-\-version\fR\. Use \fB\-\-verbose\fR for more version info, and \fB\-\-quiet\fR for less\.
.
.SH "Status"
The git\-subrepo command is coming together nicely, but some details are still being ironed out\. I would not use it for important things yet, but playing around with it is cheap (this is not \fBgit submodule\fR) , and not permanent (if you do not push to public remotes)\. ie You can always play around and reset back to the beginning without pain\.
.
.P
This command has a test suite (run \fBmake test\fR), but surely has many bugs\. If you have expertise with Git and subcommands, please review the code, and file issues on anything that seems wrong\.
.
.P
If you want to chat about the \fBgit\-subrepo\fR command, join \fB#git\-commands\fR on \fBirc\.freenode\.net\fR\.
.
.SH "Notes"
.
.IP "\(bu" 4
This command currently only works on POSIX systems\.
.
.IP "\(bu" 4
The \fBgit\-subrepo\fR repo itself has 2 subrepos under the \fBext/\fR subdirectory\.
.
.IP "\(bu" 4
Written in (very modern) Bash, with full test suite\. Take a look\.
.
.IP "" 0
.
.SH "Author"
Written by Ingy döt Net \fIingy@ingy\.net\fR
.
.SH "License and Copyright"
The MIT License (MIT)
.
.P
Copyright (c) 2013\-2014 Ingy döt Net
